PSQL_CLIENT	?= psql
PG_DUMP		?= pg_dump
DB_HOST		?= $(shell awk -F '=' '/^DB_HOST/ { print $$NF }' .env)
DB_PORT		?= $(shell awk -F '=' '/^DB_PORT/ { print $$NF }' .env)
DB_NAME		?= $(shell awk -F '=' '/^DB_NAME/ { print $$NF }' .env)
DB_USERNAME	?= $(shell awk -F '=' '/^DB_USERNAME/ { print $$NF }' .env)
DB_PASSWORD	?= $(shell awk -F '=' '/^DB_PASSWORD/ { print $$NF }' .env)
COMPOSE_FILE	?= docker-compose.yml


migrate-add:
	@echo "Creating a new database migration"
	@goose -dir sql/schemas/ create $(name) sql

build-dbmigrate:
	make -C cmd/dbmigrate build

migrate-all: build-dbmigrate
	@echo "Performing all database migrations"
	@./cmd/dbmigrate/dist/dbmigrate

db-dump:
	$(PG_DUMP) postgresql://$(DB_USERNAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME) \
		> $(DB_NAME)_dump_$(shell date "+%Y-%m-%d_%H:%M:%S").sql

db-restore:
	$(PSQL_CLIENT) postgresql://$(DB_USERNAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME) \
		-q -f $(RESTORE_FILE)

postgresql:
	@$(DOCKER) compose -f $(COMPOSE_FILE) up -d
	echo "Waiting database to start up..."
	@sleep 1

start-db: postgresql migrate-all

stop-db:
	@$(DOCKER) compose down

.PHONY: sqlc
sqlc:
	sqlc generate

